// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using CMS_Resort.Models;

namespace CMS_Resort.Data
{
    public partial class DataContext : DbContext
    {
        public DataContext()
        {
        }

        public DataContext(DbContextOptions<DataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<BedInformation> BedInformations { get; set; }
        public virtual DbSet<BookingReservation> BookingReservations { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<BranchImage> BranchImages { get; set; }
        public virtual DbSet<BranchWithRoomtype> BranchWithRoomtypes { get; set; }
        public virtual DbSet<BusinessPremise> BusinessPremises { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Enterprise> Enterprises { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<PremiseImage> PremiseImages { get; set; }
        public virtual DbSet<PremiseOperationTime> PremiseOperationTimes { get; set; }
        public virtual DbSet<RentalRoom> RentalRooms { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<RoomSupply> RoomSupplies { get; set; }
        public virtual DbSet<Roomtype> Roomtypes { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServicePackage> ServicePackages { get; set; }
        public virtual DbSet<ServicePackageInvoice> ServicePackageInvoices { get; set; }
        public virtual DbSet<SouvenirBrand> SouvenirBrands { get; set; }
        public virtual DbSet<SouvenirType> SouvenirTypes { get; set; }
        public virtual DbSet<SpaService> SpaServices { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SuppliesType> SuppliesTypes { get; set; }
        public virtual DbSet<Supply> Supplies { get; set; }
        public virtual DbSet<Supplying> Supplyings { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresEnum("service_type", new[] { "R", "S", "C", "M", "B" });

            modelBuilder.Entity<Area>(entity =>
            {
                entity.HasKey(e => new { e.AreaName, e.BranchareaId })
                    .HasName("area_pkey");

                entity.Property(e => e.BranchareaId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Brancharea)
                    .WithMany(p => p.Areas)
                    .HasForeignKey(d => d.BranchareaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("area_brancharea_id_fkey");
            });

            modelBuilder.Entity<BedInformation>(entity =>
            {
                entity.HasKey(e => new { e.BedinforSize, e.BedinforId })
                    .HasName("bed_information_pkey");

                entity.Property(e => e.BedinforNoBeds).HasDefaultValueSql("1");

                entity.HasOne(d => d.Bedinfor)
                    .WithMany(p => p.BedInformations)
                    .HasForeignKey(d => d.BedinforId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("bed_information_bedinfor_id_fkey");
            });

            modelBuilder.Entity<BookingReservation>(entity =>
            {
                entity.HasKey(e => e.BookingId)
                    .HasName("booking_reservation_pkey");

                entity.Property(e => e.BookingId).IsFixedLength();

                entity.Property(e => e.CustomerId).IsFixedLength();

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.BookingReservations)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("booking_reservation_customer_id_fkey");

                entity.HasOne(d => d.PackageNameNavigation)
                    .WithMany(p => p.BookingReservations)
                    .HasForeignKey(d => d.PackageName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("booking_reservation_package_name_fkey");
            });

            modelBuilder.Entity<Branch>(entity =>
            {
                entity.Property(e => e.Telephone).IsFixedLength();
            });

            modelBuilder.Entity<BranchImage>(entity =>
            {
                entity.HasKey(e => new { e.Branchimg, e.BranchimgId })
                    .HasName("branch_image_pkey");

                entity.HasOne(d => d.BranchimgNavigation)
                    .WithMany(p => p.BranchImages)
                    .HasForeignKey(d => d.BranchimgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("branch_image_branchimg_id_fkey");
            });

            modelBuilder.Entity<BranchWithRoomtype>(entity =>
            {
                entity.HasKey(e => new { e.BedinforRoomtypesId, e.BedinforBranchesId })
                    .HasName("branch_with_roomtypes_pkey");

                entity.Property(e => e.BedinforRoomtypesId).ValueGeneratedOnAdd();

                entity.Property(e => e.BedinforBranchesId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.BedinforBranches)
                    .WithMany(p => p.BranchWithRoomtypes)
                    .HasForeignKey(d => d.BedinforBranchesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("branch_with_roomtypes_bedinfor_branches_id_fkey");

                entity.HasOne(d => d.BedinforRoomtypes)
                    .WithMany(p => p.BranchWithRoomtypes)
                    .HasForeignKey(d => d.BedinforRoomtypesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("branch_with_roomtypes_bedinfor_roomtypes_id_fkey");
            });

            modelBuilder.Entity<BusinessPremise>(entity =>
            {
                entity.HasKey(e => new { e.BranchId, e.PremiseOrder })
                    .HasName("business_premise_pkey");

                entity.Property(e => e.BranchId).ValueGeneratedOnAdd();

                entity.Property(e => e.PremiseOrder).HasDefaultValueSql("1");

                entity.Property(e => e.ServiceId).IsFixedLength();

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.BusinessPremises)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("business_premise_service_id_fkey");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.Property(e => e.CustomerId).IsFixedLength();

                entity.Property(e => e.CustomerTelephone).IsFixedLength();

                entity.Property(e => e.CustomerType).HasDefaultValueSql("1");
            });

            modelBuilder.Entity<Enterprise>(entity =>
            {
                entity.Property(e => e.EnterpriseId).IsFixedLength();
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.Property(e => e.InvoiceId).IsFixedLength();

                entity.Property(e => e.BookingId).IsFixedLength();

                entity.HasOne(d => d.Booking)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.BookingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("invoice_booking_id_fkey");
            });

            modelBuilder.Entity<PremiseImage>(entity =>
            {
                entity.HasKey(e => new { e.BranchId, e.PremiseOrder, e.PremiseLogo })
                    .HasName("premise_image_pkey");

                entity.Property(e => e.BranchId).ValueGeneratedOnAdd();

                entity.Property(e => e.PremiseOrder).HasDefaultValueSql("1");

                entity.HasOne(d => d.BusinessPremise)
                    .WithMany(p => p.PremiseImages)
                    .HasForeignKey(d => new { d.BranchId, d.PremiseOrder })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("premise_image_branch_id_premise_order_fkey");
            });

            modelBuilder.Entity<PremiseOperationTime>(entity =>
            {
                entity.HasKey(e => new { e.BranchId, e.PremiseOrder, e.StartTime })
                    .HasName("premise_operation_time_pkey");

                entity.Property(e => e.BranchId).ValueGeneratedOnAdd();

                entity.Property(e => e.PremiseOrder).HasDefaultValueSql("1");

                entity.HasOne(d => d.BusinessPremise)
                    .WithMany(p => p.PremiseOperationTimes)
                    .HasForeignKey(d => new { d.BranchId, d.PremiseOrder })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("premise_operation_time_branch_id_premise_order_fkey");
            });

            modelBuilder.Entity<RentalRoom>(entity =>
            {
                entity.HasKey(e => new { e.BookingId, e.RoomBranchId, e.RoomNumber })
                    .HasName("rental_room_pkey");

                entity.Property(e => e.BookingId).IsFixedLength();

                entity.Property(e => e.RoomBranchId).ValueGeneratedOnAdd();

                entity.Property(e => e.RoomNumber).IsFixedLength();

                entity.HasOne(d => d.Booking)
                    .WithMany(p => p.RentalRooms)
                    .HasForeignKey(d => d.BookingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rental_room_booking_id_fkey");
            });

            modelBuilder.Entity<Room>(entity =>
            {
                entity.HasKey(e => new { e.RoomNumber, e.RoomBranchId })
                    .HasName("room_pkey");

                entity.Property(e => e.RoomNumber).IsFixedLength();

                entity.Property(e => e.RoomBranchId).ValueGeneratedOnAdd();

                entity.Property(e => e.RoomRoomtypesId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.RoomBranch)
                    .WithMany(p => p.Rooms)
                    .HasForeignKey(d => d.RoomBranchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("room_room_branch_id_fkey");

                entity.HasOne(d => d.RoomRoomtypes)
                    .WithMany(p => p.Rooms)
                    .HasForeignKey(d => d.RoomRoomtypesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("room_room_roomtypes_id_fkey");
            });

            modelBuilder.Entity<RoomSupply>(entity =>
            {
                entity.HasKey(e => new { e.RoomSuppliesId, e.RoomSuppliesRoomId })
                    .HasName("room_supplies_pkey");

                entity.Property(e => e.RoomSuppliesId).IsFixedLength();

                entity.Property(e => e.RoomSuppliesNumber).HasDefaultValueSql("1");

                entity.HasOne(d => d.RoomSupplies)
                    .WithMany(p => p.RoomSupplies)
                    .HasForeignKey(d => d.RoomSuppliesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("room_supplies_room_supplies_id_fkey");

                entity.HasOne(d => d.RoomSuppliesRoom)
                    .WithMany(p => p.RoomSupplies)
                    .HasForeignKey(d => d.RoomSuppliesRoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("room_supplies_room_supplies_room_id_fkey");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.Property(e => e.ServiceId).IsFixedLength();

                entity.Property(e => e.EnterpriseId).IsFixedLength();

                entity.HasOne(d => d.Enterprise)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.EnterpriseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("service_enterprise_id_fkey");
            });

            modelBuilder.Entity<ServicePackage>(entity =>
            {
                entity.HasKey(e => e.PackageName)
                    .HasName("service_package_pkey");
            });

            modelBuilder.Entity<ServicePackageInvoice>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.PackageName, e.BuyingDatetime })
                    .HasName("service_package_invoice_pkey");

                entity.Property(e => e.CustomerId).IsFixedLength();

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ServicePackageInvoices)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("service_package_invoice_customer_id_fkey");

                entity.HasOne(d => d.PackageNameNavigation)
                    .WithMany(p => p.ServicePackageInvoices)
                    .HasForeignKey(d => d.PackageName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("service_package_invoice_package_name_fkey");
            });

            modelBuilder.Entity<SouvenirBrand>(entity =>
            {
                entity.HasKey(e => new { e.ServiceId, e.SouBrand })
                    .HasName("souvenir_brand_pkey");

                entity.Property(e => e.ServiceId).IsFixedLength();

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.SouvenirBrands)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("souvenir_brand_service_id_fkey");
            });

            modelBuilder.Entity<SouvenirType>(entity =>
            {
                entity.HasKey(e => new { e.ServiceId, e.SouType })
                    .HasName("souvenir_type_pkey");

                entity.Property(e => e.ServiceId).IsFixedLength();

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.SouvenirTypes)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("souvenir_type_service_id_fkey");
            });

            modelBuilder.Entity<SpaService>(entity =>
            {
                entity.HasKey(e => new { e.ServiceId, e.ServiceSpa })
                    .HasName("spa_service_pkey");

                entity.Property(e => e.ServiceId).IsFixedLength();

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.SpaServices)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("spa_service_service_id_fkey");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.HasKey(e => e.SuppliersId)
                    .HasName("suppliers_pkey");

                entity.Property(e => e.SuppliersId).IsFixedLength();
            });

            modelBuilder.Entity<SuppliesType>(entity =>
            {
                entity.HasKey(e => e.SuppliesTypesId)
                    .HasName("supplies_types_pkey");

                entity.Property(e => e.SuppliesTypesId).IsFixedLength();
            });

            modelBuilder.Entity<Supply>(entity =>
            {
                entity.HasKey(e => new { e.SuppliesBranch, e.SuppliesTypesId1, e.SuppliesNumber })
                    .HasName("supplies_pkey");

                entity.Property(e => e.SuppliesTypesId1).IsFixedLength();

                entity.Property(e => e.SuppliesRoomNumber).IsFixedLength();

                entity.HasOne(d => d.SuppliesBranchNavigation)
                    .WithMany(p => p.Supplies)
                    .HasForeignKey(d => d.SuppliesBranch)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("supplies_supplies_branch_fkey");

                entity.HasOne(d => d.SuppliesTypesId1Navigation)
                    .WithMany(p => p.Supplies)
                    .HasForeignKey(d => d.SuppliesTypesId1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("supplies_supplies_types_id1_fkey");

                entity.HasOne(d => d.Supplies)
                    .WithMany(p => p.Supplies)
                    .HasForeignKey(d => new { d.SuppliesRoomNumber, d.SuppliesBranch })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("supplies_supplies_room_number_supplies_branch_fkey");
            });

            modelBuilder.Entity<Supplying>(entity =>
            {
                entity.HasKey(e => new { e.SupplyingSupplyiesId, e.SupplyingBranch })
                    .HasName("supplying_pkey");

                entity.Property(e => e.SupplyingSupplyiesId).IsFixedLength();

                entity.Property(e => e.SupplyingBranch).ValueGeneratedOnAdd();

                entity.Property(e => e.SupplyingBySuppliers).IsFixedLength();

                entity.HasOne(d => d.SupplyingBranchNavigation)
                    .WithMany(p => p.Supplyings)
                    .HasForeignKey(d => d.SupplyingBranch)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("supplying_supplying_branch_fkey");

                entity.HasOne(d => d.SupplyingBySuppliersNavigation)
                    .WithMany(p => p.Supplyings)
                    .HasForeignKey(d => d.SupplyingBySuppliers)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("supplying_supplying_by_suppliers_fkey");

                entity.HasOne(d => d.SupplyingSupplyies)
                    .WithMany(p => p.Supplyings)
                    .HasForeignKey(d => d.SupplyingSupplyiesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("supplying_supplying_supplyies_id_fkey");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}